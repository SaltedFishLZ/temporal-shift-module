Traceback (most recent call last):
  File "main.py", line 378, in <module>
    main()
  File "main.py", line 194, in main
    train(train_loader, model, criterion, optimizer, epoch, log_training, tf_writer)
  File "main.py", line 244, in train
    output = model(input_var)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/data_parallel.py", line 143, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/data_parallel.py", line 153, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/parallel_apply.py", line 83, in parallel_apply
    raise output
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/parallel_apply.py", line 59, in _worker
    output = module(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/temporal-shift-module/ops/models.py", line 247, in forward
    base_out = self.base_model(input.view((-1, sample_len) + input.size()[-2:]))
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torchvision/models/resnet.py", line 146, in forward
    x = self.layer3(x)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/container.py", line 92, in forward
    input = module(input)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torchvision/models/resnet.py", line 77, in forward
    out = self.bn1(out)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/batchnorm.py", line 76, in forward
    exponential_average_factor, self.eps)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/functional.py", line 1623, in batch_norm
    training, momentum, eps, torch.backends.cudnn.enabled
RuntimeError: CUDA out of memory. Tried to allocate 49.00 MiB (GPU 4; 11.92 GiB total capacity; 5.01 GiB already allocated; 48.00 MiB free; 113.85 MiB cached)
Traceback (most recent call last):
  File "main.py", line 378, in <module>
    main()
  File "main.py", line 194, in main
    train(train_loader, model, criterion, optimizer, epoch, log_training, tf_writer)
  File "main.py", line 244, in train
    output = model(input_var)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/data_parallel.py", line 143, in forward
    outputs = self.parallel_apply(replicas, inputs, kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/data_parallel.py", line 153, in parallel_apply
    return parallel_apply(replicas, inputs, kwargs, self.device_ids[:len(replicas)])
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/parallel_apply.py", line 83, in parallel_apply
    raise output
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/parallel/parallel_apply.py", line 59, in _worker
    output = module(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/temporal-shift-module/ops/models.py", line 247, in forward
    base_out = self.base_model(input.view((-1, sample_len) + input.size()[-2:]))
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torchvision/models/resnet.py", line 146, in forward
    x = self.layer3(x)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/container.py", line 92, in forward
    input = module(input)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torchvision/models/resnet.py", line 85, in forward
    out = self.bn3(out)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/modules/batchnorm.py", line 76, in forward
    exponential_average_factor, self.eps)
  File "/rscratch/zhendong/video-acc/TSM/venv_tsm/lib/python3.5/site-packages/torch/nn/functional.py", line 1623, in batch_norm
    training, momentum, eps, torch.backends.cudnn.enabled
RuntimeError: CUDA out of memory. Tried to allocate 98.00 MiB (GPU 0; 11.92 GiB total capacity; 11.49 GiB already allocated; 23.75 MiB free; 47.40 MiB cached)
